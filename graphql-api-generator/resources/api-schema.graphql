directive @distinct on FIELD_DEFINITION

directive @noloops on FIELD_DEFINITION

type Audio implements Content {
  source: [ResultPage!]!
  url: String!
  path: String!
  job: Job!
  id: ID!
  _sourceFromEntityObject: [EntityObject]
}

type Authority {
  name: String!
  position: String!
  id: ID!
  _authByFromAuthorization: [Authorization]
}

type Authorization {
  searchPurpose: String!
  necessity: [Necessity]
  proportionality: [Proportionality]
  trainedAndAuthorized: Boolean
  darkWeb: Boolean!
  authBy: Authority!
  created: Date!
  id: ID!
  _authorizationFromInvestigation: [Investigation]
}

interface Content {
  source: [ResultPage!]!
  path: String!
  job: Job!
  id: ID!
}

type CrawlingJob {
  jobTiming: JobTiming!
  contentIntakeRules: [CrawlingRule!]!
  investigation: Investigation!
  id: ID!
  _crawlingJobFromJob: [Job]
}

type CrawlingRule {
  seed_url: String!
  depth: Int
  id: ID!
  _contentIntakeRulesFromCrawlingJob: [CrawlingJob]
}

scalar Date

type DetectedAge {
  min: Float!
  max: Float!
  id: ID!
  _ageFromFaceDetectionResult: [FaceDetectionResult]
}

enum DetectedGender {
  MALE
  FEMALE
}

interface DetectionRegion {
  id: ID!
}

interface DetectionResult {
  source: Content!
  region: DetectionRegion
  algorithm: String!
  id: ID!
}

type EntityObject {
  value: EntityValue!
  type: String!
  note: String
  reasonForAddition: String
  hide: Boolean!
  source: [Content!]
  cooccurs: [EntityObject]
  inference(reasonForAddition: String!): [EntityObject]
  id: ID!
  _cooccursFromEntityObject: [EntityObject]
  _inferenceFromEntityObject: [EntityObject]
}

enum EntityValue {
  PERSON
  NORP
  FAC
  ORG
  GPE
  LOC
  PRODUCT
  EVENT
  WORK_OF_ART
  LAW
  LANGUAGE
  DATE
  TIME
  PERCENT
  MONEY
  QUANTITY
  ORDINAL
  CARDINAL
}

type FaceDetectionRegion implements DetectionRegion {
  boundingBox: [NormalizedCoordinates!]!
  id: ID!
  _regionFromFaceDetectionResult: [FaceDetectionResult]
}

type FaceDetectionResult implements DetectionResult {
  source: Image!
  investigation: Investigation!
  algorithm: String!
  embeddingAlgorithm: String!
  region: FaceDetectionRegion!
  gender: DetectedGender
  age: DetectedAge
  embedding: String!
  similarity(distance: Float!): [FaceDetectionResult!]
  id: ID!
  _similarityFromFaceDetectionResult: [FaceDetectionResult]
}

type Image implements Content {
  source: [ResultPage!]!
  url: String!
  path: String!
  job: Job!
  id: ID!
  _sourceFromFaceDetectionResult: [FaceDetectionResult]
  _sourceFromEntityObject: [EntityObject]
}

type Investigation {
  userID: ID!
  title: String!
  description: String!
  caseNumber: String!
  authorization: Authorization
  jobs: [Job]
  created: Date!
  hide: Boolean!
  id: ID!
  _investigationFromJob: [Job]
  _investigationFromCrawlingJob: [CrawlingJob]
  _investigationFromThirdPartySearchJob: [ThirdPartySearchJob]
  _investigationFromFaceDetectionResult: [FaceDetectionResult]
}

type Job {
  investigation: Investigation!
  crawlingJob: CrawlingJob
  thirdPartySearchJob: ThirdPartySearchJob
  refinedSearch: RefinedSearch
  id: ID!
  _jobsFromInvestigation: [Investigation]
  _jobFromImage: [Image]
  _jobFromAudio: [Audio]
  _jobFromText: [Text]
  _jobFromVideo: [Video]
}

type JobTiming {
  date: Date
  repeatEach: Int
  until: Date
  runNow: Boolean!
  active: Boolean!
  id: ID!
  _jobTimingFromCrawlingJob: [CrawlingJob]
  _jobTimingFromThirdPartySearchJob: [ThirdPartySearchJob]
}

type L1Result implements ResultItem {
  page: ResultPage!
  node: String!
  href: String!
  url: String!
  title: String!
  citation: String!
  summary: String!
  include: Boolean!
  excludeReason: String!
  hide: Boolean!
  use: Boolean!
  id: ID!
  _L1resultsFromResultPage: [ResultPage]
}

type L2Result implements ResultItem {
  page: ResultPage!
  node: String!
  url: String!
  urlText: String!
  description: String!
  include: Boolean!
  excludeReason: String!
  hide: Boolean!
  use: Boolean!
  id: ID!
  _L2resultsFromResultPage: [ResultPage]
}

type Mutation {
  createVideo(data: _InputToCreateVideo): Video
  createResultPage(data: _InputToCreateResultPage): ResultPage
  createSite(data: _InputToCreateSite): Site
  createL1Result(data: _InputToCreateL1Result): L1Result
  createL2Result(data: _InputToCreateL2Result): L2Result
  createRefinedSearch(data: _InputToCreateRefinedSearch): RefinedSearch
  createJob(data: _InputToCreateJob): Job
  createInvestigation(data: _InputToCreateInvestigation): Investigation
  createAuthorization(data: _InputToCreateAuthorization): Authorization
  createAuthority(data: _InputToCreateAuthority): Authority
  createCrawlingJob(data: _InputToCreateCrawlingJob): CrawlingJob
  createJobTiming(data: _InputToCreateJobTiming): JobTiming
  createThirdPartySearchJob(data: _InputToCreateThirdPartySearchJob): ThirdPartySearchJob
  createThirdPartySearchRule(data: _InputToCreateThirdPartySearchRule): ThirdPartySearchRule
  createCrawlingRule(data: _InputToCreateCrawlingRule): CrawlingRule
  createFaceDetectionResult(data: _InputToCreateFaceDetectionResult): FaceDetectionResult
  createImage(data: _InputToCreateImage): Image
  createEntityObject(data: _InputToCreateEntityObject): EntityObject
  createFaceDetectionRegion(data: _InputToCreateFaceDetectionRegion): FaceDetectionRegion
  createNormalizedCoordinates(data: _InputToCreateNormalizedCoordinates): NormalizedCoordinates
  createDetectedAge(data: _InputToCreateDetectedAge): DetectedAge
  createAudio(data: _InputToCreateAudio): Audio
  createText(data: _InputToCreateText): Text
  updateVideo(id: ID!, data: _InputToUpdateVideo): Video
  updateResultPage(id: ID!, data: _InputToUpdateResultPage): ResultPage
  updateSite(id: ID!, data: _InputToUpdateSite): Site
  updateL1Result(id: ID!, data: _InputToUpdateL1Result): L1Result
  updateL2Result(id: ID!, data: _InputToUpdateL2Result): L2Result
  updateRefinedSearch(id: ID!, data: _InputToUpdateRefinedSearch): RefinedSearch
  updateJob(id: ID!, data: _InputToUpdateJob): Job
  updateInvestigation(id: ID!, data: _InputToUpdateInvestigation): Investigation
  updateAuthorization(id: ID!, data: _InputToUpdateAuthorization): Authorization
  updateAuthority(id: ID!, data: _InputToUpdateAuthority): Authority
  updateCrawlingJob(id: ID!, data: _InputToUpdateCrawlingJob): CrawlingJob
  updateJobTiming(id: ID!, data: _InputToUpdateJobTiming): JobTiming
  updateThirdPartySearchJob(id: ID!, data: _InputToUpdateThirdPartySearchJob): ThirdPartySearchJob
  updateThirdPartySearchRule(id: ID!, data: _InputToUpdateThirdPartySearchRule): ThirdPartySearchRule
  updateCrawlingRule(id: ID!, data: _InputToUpdateCrawlingRule): CrawlingRule
  updateFaceDetectionResult(id: ID!, data: _InputToUpdateFaceDetectionResult): FaceDetectionResult
  updateImage(id: ID!, data: _InputToUpdateImage): Image
  updateEntityObject(id: ID!, data: _InputToUpdateEntityObject): EntityObject
  updateFaceDetectionRegion(id: ID!, data: _InputToUpdateFaceDetectionRegion): FaceDetectionRegion
  updateNormalizedCoordinates(id: ID!, data: _InputToUpdateNormalizedCoordinates): NormalizedCoordinates
  updateDetectedAge(id: ID!, data: _InputToUpdateDetectedAge): DetectedAge
  updateAudio(id: ID!, data: _InputToUpdateAudio): Audio
  updateText(id: ID!, data: _InputToUpdateText): Text
}

enum Necessity {
  NationalSecurity
  PreventionCrime
  EconomicWellBeingState
  PublicSafety
  ProtectPublicHealth
  GovernmentDepartmentCollection
  SecretaryStateOtherPurposes
}

type NormalizedCoordinates {
  x: Float!
  y: Float!
  id: ID!
  _boundingBoxFromFaceDetectionRegion: [FaceDetectionRegion]
}

enum Proportionality {
  ECHRrights
  HardAchievedInformation
  InvesAuthorityJurisdiction
  CollectionToolTraining
  PotentialCollateralIntrusion
  LowRiskOfConfidentialMaterial
  AuditableMannerRecordingResults
}

type Query {
  detectionResult(id: ID!): DetectionResult
  content(id: ID!): Content
  resultPage(id: ID!): ResultPage
  site(id: ID!): Site
  l1Result(id: ID!): L1Result
  resultItem(id: ID!): ResultItem
  l2Result(id: ID!): L2Result
  refinedSearch(id: ID!): RefinedSearch
  job(id: ID!): Job
  investigation(id: ID!): Investigation
  authorization(id: ID!): Authorization
  authority(id: ID!): Authority
  crawlingJob(id: ID!): CrawlingJob
  jobTiming(id: ID!): JobTiming
  thirdPartySearchJob(id: ID!): ThirdPartySearchJob
  thirdPartySearchRule(id: ID!): ThirdPartySearchRule
  crawlingRule(id: ID!): CrawlingRule
  faceDetectionResult(id: ID!): FaceDetectionResult
  image(id: ID!): Image
  entityObject(id: ID!): EntityObject
  faceDetectionRegion(id: ID!): FaceDetectionRegion
  detectionRegion(id: ID!): DetectionRegion
  normalizedCoordinates(id: ID!): NormalizedCoordinates
  detectedAge(id: ID!): DetectedAge
  audio(id: ID!): Audio
  text(id: ID!): Text
  video(id: ID!): Video
  listOfVideos(first: Int = 10, after: ID = "", filter: _FilterForVideo): _ListOfVideos
  listOfContents(first: Int = 10, after: ID = "", filter: _FilterForContent): _ListOfContents
  listOfResultPages(first: Int = 10, after: ID = "", filter: _FilterForResultPage): _ListOfResultPages
  listOfSites(first: Int = 10, after: ID = "", filter: _FilterForSite): _ListOfSites
  listOfL1Results(first: Int = 10, after: ID = "", filter: _FilterForL1Result): _ListOfL1Results
  listOfResultItems(first: Int = 10, after: ID = "", filter: _FilterForResultItem): _ListOfResultItems
  listOfL2Results(first: Int = 10, after: ID = "", filter: _FilterForL2Result): _ListOfL2Results
  listOfRefinedSearchs(first: Int = 10, after: ID = "", filter: _FilterForRefinedSearch): _ListOfRefinedSearchs
  listOfJobs(first: Int = 10, after: ID = "", filter: _FilterForJob): _ListOfJobs
  listOfInvestigations(first: Int = 10, after: ID = "", filter: _FilterForInvestigation): _ListOfInvestigations
  listOfAuthorizations(first: Int = 10, after: ID = "", filter: _FilterForAuthorization): _ListOfAuthorizations
  listOfAuthoritys(first: Int = 10, after: ID = "", filter: _FilterForAuthority): _ListOfAuthoritys
  listOfCrawlingJobs(first: Int = 10, after: ID = "", filter: _FilterForCrawlingJob): _ListOfCrawlingJobs
  listOfJobTimings(first: Int = 10, after: ID = "", filter: _FilterForJobTiming): _ListOfJobTimings
  listOfThirdPartySearchJobs(first: Int = 10, after: ID = "", filter: _FilterForThirdPartySearchJob): _ListOfThirdPartySearchJobs
  listOfThirdPartySearchRules(first: Int = 10, after: ID = "", filter: _FilterForThirdPartySearchRule): _ListOfThirdPartySearchRules
  listOfCrawlingRules(first: Int = 10, after: ID = "", filter: _FilterForCrawlingRule): _ListOfCrawlingRules
  listOfFaceDetectionResults(first: Int = 10, after: ID = "", filter: _FilterForFaceDetectionResult): _ListOfFaceDetectionResults
  listOfDetectionResults(first: Int = 10, after: ID = "", filter: _FilterForDetectionResult): _ListOfDetectionResults
  listOfDetectionRegions(first: Int = 10, after: ID = "", filter: _FilterForDetectionRegion): _ListOfDetectionRegions
  listOfImages(first: Int = 10, after: ID = "", filter: _FilterForImage): _ListOfImages
  listOfEntityObjects(first: Int = 10, after: ID = "", filter: _FilterForEntityObject): _ListOfEntityObjects
  listOfFaceDetectionRegions(first: Int = 10, after: ID = "", filter: _FilterForFaceDetectionRegion): _ListOfFaceDetectionRegions
  listOfNormalizedCoordinatess(first: Int = 10, after: ID = "", filter: _FilterForNormalizedCoordinates): _ListOfNormalizedCoordinatess
  listOfDetectedAges(first: Int = 10, after: ID = "", filter: _FilterForDetectedAge): _ListOfDetectedAges
  listOfAudios(first: Int = 10, after: ID = "", filter: _FilterForAudio): _ListOfAudios
  listOfTexts(first: Int = 10, after: ID = "", filter: _FilterForText): _ListOfTexts
}

type RefinedSearch {
  userID: ID!
  keyword: String!
  reason: String!
  type: RefinedSearchType
  level: Int
  surfaceWebs: [SurfaceWeb]
  socialMedias: [SocialMedia]
  searchStatus: SearchStatus!
  results: [ResultPage]
  created: Date!
  hide: Boolean!
  id: ID!
  _refinedSearchFromJob: [Job]
}

enum RefinedSearchType {
  Fuzzy
  Exact
}

interface ResultItem {
  node: String!
  url: String!
  include: Boolean!
  excludeReason: String!
  hide: Boolean!
  use: Boolean!
  id: ID!
}

type ResultPage {
  site: Site!
  searchLevel: Int!
  url: String!
  html: String!
  status: String!
  L1results: [L1Result]
  L2results: [L2Result]
  id: ID!
  _pageFromL1Result: [L1Result]
  _pageFromL2Result: [L2Result]
  _resultsFromRefinedSearch: [RefinedSearch]
  _sourceFromImage: [Image]
  _sourceFromAudio: [Audio]
  _sourceFromText: [Text]
  _sourceFromVideo: [Video]
}

enum SearchSite {
  Google
  Yahoo
  Facebook
  Twitter
}

enum SearchStatus {
  L1Requested
  L1Notified
  L1Returned
  L2Requested
  L2Notified
  L2Returned
  AnalysisRequested
  AnalysisCompleted
}

type Site {
  siteType: SiteType!
  siteName: SearchSite!
  id: ID!
  _siteFromResultPage: [ResultPage]
}

enum SiteType {
  SurfaceWeb
  SocialMedia
  DarkWeb
  DeepWeb
}

enum SocialMedia {
  Facebook
  Twitter
}

enum SurfaceWeb {
  Google
  Yahoo
}

type Text implements Content {
  source: [ResultPage!]!
  path: String!
  job: Job!
  id: ID!
  _sourceFromEntityObject: [EntityObject]
}

type ThirdPartySearchJob {
  jobTiming: JobTiming!
  contentIntakeRules: [ThirdPartySearchRule!]!
  investigation: Investigation!
  id: ID!
  _thirdPartySearchJobFromJob: [Job]
}

type ThirdPartySearchRule {
  keywords: [String!]!
  service: SocialMedia!
  id: ID!
  _contentIntakeRulesFromThirdPartySearchJob: [ThirdPartySearchJob]
}

type Video implements Content {
  source: [ResultPage!]!
  url: String!
  path: String!
  job: Job!
  id: ID!
  _sourceFromEntityObject: [EntityObject]
}

input _BooleanFilter {
  _eq: Boolean
  _neq: Boolean
}

input _DateFilter {
  _eq: Date
  _neq: Date
  _in: [Date]
  _nin: [Date]
}

input _DetectedGenderFilter {
  _eq: DetectedGender
  _neq: DetectedGender
  _in: [DetectedGender]
  _nin: [DetectedGender]
}

input _EntityValueFilter {
  _eq: EntityValue
  _neq: EntityValue
  _in: [EntityValue]
  _nin: [EntityValue]
}

input _FilterForAudio {
  _and: [_FilterForAudio]
  _or: [_FilterForAudio]
  _not: _FilterForAudio
  url: _StringFilter
  path: _StringFilter
  id: _IDFilter
}

input _FilterForAuthority {
  _and: [_FilterForAuthority]
  _or: [_FilterForAuthority]
  _not: _FilterForAuthority
  name: _StringFilter
  position: _StringFilter
  id: _IDFilter
}

input _FilterForAuthorization {
  _and: [_FilterForAuthorization]
  _or: [_FilterForAuthorization]
  _not: _FilterForAuthorization
  searchPurpose: _StringFilter
  trainedAndAuthorized: _BooleanFilter
  darkWeb: _BooleanFilter
  created: _DateFilter
  id: _IDFilter
}

input _FilterForContent {
  _and: [_FilterForContent]
  _or: [_FilterForContent]
  _not: _FilterForContent
  path: _StringFilter
  id: _IDFilter
}

input _FilterForCrawlingJob {
  _and: [_FilterForCrawlingJob]
  _or: [_FilterForCrawlingJob]
  _not: _FilterForCrawlingJob
  id: _IDFilter
}

input _FilterForCrawlingRule {
  _and: [_FilterForCrawlingRule]
  _or: [_FilterForCrawlingRule]
  _not: _FilterForCrawlingRule
  seed_url: _StringFilter
  depth: _IntFilter
  id: _IDFilter
}

input _FilterForDetectedAge {
  _and: [_FilterForDetectedAge]
  _or: [_FilterForDetectedAge]
  _not: _FilterForDetectedAge
  min: _FloatFilter
  max: _FloatFilter
  id: _IDFilter
}

input _FilterForDetectionRegion {
  _and: [_FilterForDetectionRegion]
  _or: [_FilterForDetectionRegion]
  _not: _FilterForDetectionRegion
  id: _IDFilter
}

input _FilterForDetectionResult {
  _and: [_FilterForDetectionResult]
  _or: [_FilterForDetectionResult]
  _not: _FilterForDetectionResult
  algorithm: _StringFilter
  id: _IDFilter
}

input _FilterForEntityObject {
  _and: [_FilterForEntityObject]
  _or: [_FilterForEntityObject]
  _not: _FilterForEntityObject
  value: _EntityValueFilter
  type: _StringFilter
  note: _StringFilter
  reasonForAddition: _StringFilter
  hide: _BooleanFilter
  id: _IDFilter
}

input _FilterForFaceDetectionRegion {
  _and: [_FilterForFaceDetectionRegion]
  _or: [_FilterForFaceDetectionRegion]
  _not: _FilterForFaceDetectionRegion
  id: _IDFilter
}

input _FilterForFaceDetectionResult {
  _and: [_FilterForFaceDetectionResult]
  _or: [_FilterForFaceDetectionResult]
  _not: _FilterForFaceDetectionResult
  algorithm: _StringFilter
  embeddingAlgorithm: _StringFilter
  gender: _DetectedGenderFilter
  embedding: _StringFilter
  id: _IDFilter
}

input _FilterForImage {
  _and: [_FilterForImage]
  _or: [_FilterForImage]
  _not: _FilterForImage
  url: _StringFilter
  path: _StringFilter
  id: _IDFilter
}

input _FilterForInvestigation {
  _and: [_FilterForInvestigation]
  _or: [_FilterForInvestigation]
  _not: _FilterForInvestigation
  userID: _IDFilter
  title: _StringFilter
  description: _StringFilter
  caseNumber: _StringFilter
  created: _DateFilter
  hide: _BooleanFilter
  id: _IDFilter
}

input _FilterForJob {
  _and: [_FilterForJob]
  _or: [_FilterForJob]
  _not: _FilterForJob
  id: _IDFilter
}

input _FilterForJobTiming {
  _and: [_FilterForJobTiming]
  _or: [_FilterForJobTiming]
  _not: _FilterForJobTiming
  date: _DateFilter
  repeatEach: _IntFilter
  until: _DateFilter
  runNow: _BooleanFilter
  active: _BooleanFilter
  id: _IDFilter
}

input _FilterForL1Result {
  _and: [_FilterForL1Result]
  _or: [_FilterForL1Result]
  _not: _FilterForL1Result
  node: _StringFilter
  href: _StringFilter
  url: _StringFilter
  title: _StringFilter
  citation: _StringFilter
  summary: _StringFilter
  include: _BooleanFilter
  excludeReason: _StringFilter
  hide: _BooleanFilter
  use: _BooleanFilter
  id: _IDFilter
}

input _FilterForL2Result {
  _and: [_FilterForL2Result]
  _or: [_FilterForL2Result]
  _not: _FilterForL2Result
  node: _StringFilter
  url: _StringFilter
  urlText: _StringFilter
  description: _StringFilter
  include: _BooleanFilter
  excludeReason: _StringFilter
  hide: _BooleanFilter
  use: _BooleanFilter
  id: _IDFilter
}

input _FilterForNormalizedCoordinates {
  _and: [_FilterForNormalizedCoordinates]
  _or: [_FilterForNormalizedCoordinates]
  _not: _FilterForNormalizedCoordinates
  x: _FloatFilter
  y: _FloatFilter
  id: _IDFilter
}

input _FilterForRefinedSearch {
  _and: [_FilterForRefinedSearch]
  _or: [_FilterForRefinedSearch]
  _not: _FilterForRefinedSearch
  userID: _IDFilter
  keyword: _StringFilter
  reason: _StringFilter
  type: _RefinedSearchTypeFilter
  level: _IntFilter
  searchStatus: _SearchStatusFilter
  created: _DateFilter
  hide: _BooleanFilter
  id: _IDFilter
}

input _FilterForResultItem {
  _and: [_FilterForResultItem]
  _or: [_FilterForResultItem]
  _not: _FilterForResultItem
  node: _StringFilter
  url: _StringFilter
  include: _BooleanFilter
  excludeReason: _StringFilter
  hide: _BooleanFilter
  use: _BooleanFilter
  id: _IDFilter
}

input _FilterForResultPage {
  _and: [_FilterForResultPage]
  _or: [_FilterForResultPage]
  _not: _FilterForResultPage
  searchLevel: _IntFilter
  url: _StringFilter
  html: _StringFilter
  status: _StringFilter
  id: _IDFilter
}

input _FilterForSite {
  _and: [_FilterForSite]
  _or: [_FilterForSite]
  _not: _FilterForSite
  siteType: _SiteTypeFilter
  siteName: _SearchSiteFilter
  id: _IDFilter
}

input _FilterForText {
  _and: [_FilterForText]
  _or: [_FilterForText]
  _not: _FilterForText
  path: _StringFilter
  id: _IDFilter
}

input _FilterForThirdPartySearchJob {
  _and: [_FilterForThirdPartySearchJob]
  _or: [_FilterForThirdPartySearchJob]
  _not: _FilterForThirdPartySearchJob
  id: _IDFilter
}

input _FilterForThirdPartySearchRule {
  _and: [_FilterForThirdPartySearchRule]
  _or: [_FilterForThirdPartySearchRule]
  _not: _FilterForThirdPartySearchRule
  keywords: _StringFilter
  service: _SocialMediaFilter
  id: _IDFilter
}

input _FilterForVideo {
  _and: [_FilterForVideo]
  _or: [_FilterForVideo]
  _not: _FilterForVideo
  url: _StringFilter
  path: _StringFilter
  id: _IDFilter
}

input _FloatFilter {
  _eq: Float
  _neq: Float
  _gt: Float
  _egt: Float
  _lt: Float
  _elt: Float
  _in: [Float]
  _nin: [Float]
}

input _IDFilter {
  _eq: ID
  _neq: ID
  _in: [ID]
  _nin: [ID]
}

input _InputToConnectAudio {
  connect: ID
  create: _InputToCreateAudio
}

input _InputToConnectAuthority {
  connect: ID
  create: _InputToCreateAuthority
}

input _InputToConnectAuthorization {
  connect: ID
  create: _InputToCreateAuthorization
}

input _InputToConnectContent {
  connect: ID
  createImage: _InputToConnectImage
  createAudio: _InputToConnectAudio
  createText: _InputToConnectText
  createVideo: _InputToConnectVideo
}

input _InputToConnectCrawlingJob {
  connect: ID
  create: _InputToCreateCrawlingJob
}

input _InputToConnectCrawlingRule {
  connect: ID
  create: _InputToCreateCrawlingRule
}

input _InputToConnectDetectedAge {
  connect: ID
  create: _InputToCreateDetectedAge
}

input _InputToConnectDetectionRegion {
  connect: ID
}

input _InputToConnectDetectionResult {
  connect: ID
}

input _InputToConnectEntityObject {
  connect: ID
  create: _InputToCreateEntityObject
}

input _InputToConnectFaceDetectionRegion {
  connect: ID
  create: _InputToCreateFaceDetectionRegion
}

input _InputToConnectFaceDetectionResult {
  connect: ID
  create: _InputToCreateFaceDetectionResult
}

input _InputToConnectImage {
  connect: ID
  create: _InputToCreateImage
}

input _InputToConnectInvestigation {
  connect: ID
  create: _InputToCreateInvestigation
}

input _InputToConnectJob {
  connect: ID
  create: _InputToCreateJob
}

input _InputToConnectJobTiming {
  connect: ID
  create: _InputToCreateJobTiming
}

input _InputToConnectL1Result {
  connect: ID
  create: _InputToCreateL1Result
}

input _InputToConnectL2Result {
  connect: ID
  create: _InputToCreateL2Result
}

input _InputToConnectNormalizedCoordinates {
  connect: ID
  create: _InputToCreateNormalizedCoordinates
}

input _InputToConnectRefinedSearch {
  connect: ID
  create: _InputToCreateRefinedSearch
}

input _InputToConnectResultItem {
  connect: ID
}

input _InputToConnectResultPage {
  connect: ID
  create: _InputToCreateResultPage
}

input _InputToConnectSite {
  connect: ID
  create: _InputToCreateSite
}

input _InputToConnectText {
  connect: ID
  create: _InputToCreateText
}

input _InputToConnectThirdPartySearchJob {
  connect: ID
  create: _InputToCreateThirdPartySearchJob
}

input _InputToConnectThirdPartySearchRule {
  connect: ID
  create: _InputToCreateThirdPartySearchRule
}

input _InputToConnectVideo {
  connect: ID
  create: _InputToCreateVideo
}

input _InputToCreateAudio {
  source: [_InputToConnectResultPage!]!
  url: String!
  path: String!
  job: _InputToConnectJob!
}

input _InputToCreateAuthority {
  name: String!
  position: String!
}

input _InputToCreateAuthorization {
  searchPurpose: String!
  necessity: [Necessity]
  proportionality: [Proportionality]
  trainedAndAuthorized: Boolean
  darkWeb: Boolean!
  authBy: _InputToConnectAuthority!
  created: Date!
}

input _InputToCreateCrawlingJob {
  jobTiming: _InputToConnectJobTiming!
  contentIntakeRules: [_InputToConnectCrawlingRule!]!
  investigation: _InputToConnectInvestigation!
}

input _InputToCreateCrawlingRule {
  seed_url: String!
  depth: Int
}

input _InputToCreateDetectedAge {
  min: Float!
  max: Float!
}

input _InputToCreateEntityObject {
  value: EntityValue!
  type: String!
  note: String
  reasonForAddition: String
  hide: Boolean!
  cooccurs: [_InputToConnectEntityObject]
  inference: [_InputToConnectEntityObject]
}

input _InputToCreateFaceDetectionRegion {
  boundingBox: [_InputToConnectNormalizedCoordinates!]!
}

input _InputToCreateFaceDetectionResult {
  source: _InputToConnectImage!
  investigation: _InputToConnectInvestigation!
  algorithm: String!
  embeddingAlgorithm: String!
  region: _InputToConnectFaceDetectionRegion!
  gender: DetectedGender
  age: _InputToConnectDetectedAge
  embedding: String!
  similarity: [_InputToConnectFaceDetectionResult!]
}

input _InputToCreateImage {
  source: [_InputToConnectResultPage!]!
  url: String!
  path: String!
  job: _InputToConnectJob!
}

input _InputToCreateInvestigation {
  userID: ID!
  title: String!
  description: String!
  caseNumber: String!
  authorization: _InputToConnectAuthorization
  jobs: [_InputToConnectJob]
  created: Date!
  hide: Boolean!
}

input _InputToCreateJob {
  investigation: _InputToConnectInvestigation!
  crawlingJob: _InputToConnectCrawlingJob
  thirdPartySearchJob: _InputToConnectThirdPartySearchJob
  refinedSearch: _InputToConnectRefinedSearch
}

input _InputToCreateJobTiming {
  date: Date
  repeatEach: Int
  until: Date
  runNow: Boolean!
  active: Boolean!
}

input _InputToCreateL1Result {
  page: _InputToConnectResultPage!
  node: String!
  href: String!
  url: String!
  title: String!
  citation: String!
  summary: String!
  include: Boolean!
  excludeReason: String!
  hide: Boolean!
  use: Boolean!
}

input _InputToCreateL2Result {
  page: _InputToConnectResultPage!
  node: String!
  url: String!
  urlText: String!
  description: String!
  include: Boolean!
  excludeReason: String!
  hide: Boolean!
  use: Boolean!
}

input _InputToCreateNormalizedCoordinates {
  x: Float!
  y: Float!
}

input _InputToCreateRefinedSearch {
  userID: ID!
  keyword: String!
  reason: String!
  type: RefinedSearchType
  level: Int
  surfaceWebs: [SurfaceWeb]
  socialMedias: [SocialMedia]
  searchStatus: SearchStatus!
  results: [_InputToConnectResultPage]
  created: Date!
  hide: Boolean!
}

input _InputToCreateResultPage {
  site: _InputToConnectSite!
  searchLevel: Int!
  url: String!
  html: String!
  status: String!
  L1results: [_InputToConnectL1Result]
  L2results: [_InputToConnectL2Result]
}

input _InputToCreateSite {
  siteType: SiteType!
  siteName: SearchSite!
}

input _InputToCreateText {
  source: [_InputToConnectResultPage!]!
  path: String!
  job: _InputToConnectJob!
}

input _InputToCreateThirdPartySearchJob {
  jobTiming: _InputToConnectJobTiming!
  contentIntakeRules: [_InputToConnectThirdPartySearchRule!]!
  investigation: _InputToConnectInvestigation!
}

input _InputToCreateThirdPartySearchRule {
  keywords: [String!]!
  service: SocialMedia!
}

input _InputToCreateVideo {
  source: [_InputToConnectResultPage!]!
  url: String!
  path: String!
  job: _InputToConnectJob!
}

input _InputToUpdateAudio {
  source: _InputToConnectResultPage
  url: String
  path: String
  job: _InputToConnectJob
}

input _InputToUpdateAuthority {
  name: String
  position: String
}

input _InputToUpdateAuthorization {
  searchPurpose: String
  necessity: [Necessity]
  proportionality: [Proportionality]
  trainedAndAuthorized: Boolean
  darkWeb: Boolean
  authBy: _InputToConnectAuthority
  created: Date
}

input _InputToUpdateCrawlingJob {
  jobTiming: _InputToConnectJobTiming
  contentIntakeRules: _InputToConnectCrawlingRule
  investigation: _InputToConnectInvestigation
}

input _InputToUpdateCrawlingRule {
  seed_url: String
  depth: Int
}

input _InputToUpdateDetectedAge {
  min: Float
  max: Float
}

input _InputToUpdateEntityObject {
  value: EntityValue
  type: String
  note: String
  reasonForAddition: String
  hide: Boolean
  source: [_InputToConnectContent!]
  cooccurs: [_InputToConnectEntityObject]
  inference: [_InputToConnectEntityObject]
}

input _InputToUpdateFaceDetectionRegion {
  boundingBox: _InputToConnectNormalizedCoordinates
}

input _InputToUpdateFaceDetectionResult {
  source: _InputToConnectImage
  investigation: _InputToConnectInvestigation
  algorithm: String
  embeddingAlgorithm: String
  region: _InputToConnectFaceDetectionRegion
  gender: DetectedGender
  age: _InputToConnectDetectedAge
  embedding: String
  similarity: [_InputToConnectFaceDetectionResult!]
}

input _InputToUpdateImage {
  source: _InputToConnectResultPage
  url: String
  path: String
  job: _InputToConnectJob
}

input _InputToUpdateInvestigation {
  userID: ID
  title: String
  description: String
  caseNumber: String
  authorization: _InputToConnectAuthorization
  jobs: [_InputToConnectJob]
  created: Date
  hide: Boolean
}

input _InputToUpdateJob {
  investigation: _InputToConnectInvestigation
  crawlingJob: _InputToConnectCrawlingJob
  thirdPartySearchJob: _InputToConnectThirdPartySearchJob
  refinedSearch: _InputToConnectRefinedSearch
}

input _InputToUpdateJobTiming {
  date: Date
  repeatEach: Int
  until: Date
  runNow: Boolean
  active: Boolean
}

input _InputToUpdateL1Result {
  page: _InputToConnectResultPage
  node: String
  href: String
  url: String
  title: String
  citation: String
  summary: String
  include: Boolean
  excludeReason: String
  hide: Boolean
  use: Boolean
}

input _InputToUpdateL2Result {
  page: _InputToConnectResultPage
  node: String
  url: String
  urlText: String
  description: String
  include: Boolean
  excludeReason: String
  hide: Boolean
  use: Boolean
}

input _InputToUpdateNormalizedCoordinates {
  x: Float
  y: Float
}

input _InputToUpdateRefinedSearch {
  userID: ID
  keyword: String
  reason: String
  type: RefinedSearchType
  level: Int
  surfaceWebs: [SurfaceWeb]
  socialMedias: [SocialMedia]
  searchStatus: SearchStatus
  results: [_InputToConnectResultPage]
  created: Date
  hide: Boolean
}

input _InputToUpdateResultPage {
  site: _InputToConnectSite
  searchLevel: Int
  url: String
  html: String
  status: String
  L1results: [_InputToConnectL1Result]
  L2results: [_InputToConnectL2Result]
}

input _InputToUpdateSite {
  siteType: SiteType
  siteName: SearchSite
}

input _InputToUpdateText {
  source: _InputToConnectResultPage
  path: String
  job: _InputToConnectJob
}

input _InputToUpdateThirdPartySearchJob {
  jobTiming: _InputToConnectJobTiming
  contentIntakeRules: _InputToConnectThirdPartySearchRule
  investigation: _InputToConnectInvestigation
}

input _InputToUpdateThirdPartySearchRule {
  keywords: String
  service: SocialMedia
}

input _InputToUpdateVideo {
  source: _InputToConnectResultPage
  url: String
  path: String
  job: _InputToConnectJob
}

input _IntFilter {
  _eq: Int
  _neq: Int
  _gt: Int
  _egt: Int
  _lt: Int
  _elt: Int
  _in: [Int]
  _nin: [Int]
}

type _ListOfAudios {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [Audio]
}

type _ListOfAuthoritys {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [Authority]
}

type _ListOfAuthorizations {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [Authorization]
}

type _ListOfContents {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [Content]
}

type _ListOfCrawlingJobs {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [CrawlingJob]
}

type _ListOfCrawlingRules {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [CrawlingRule]
}

type _ListOfDetectedAges {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [DetectedAge]
}

type _ListOfDetectionRegions {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [DetectionRegion]
}

type _ListOfDetectionResults {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [DetectionResult]
}

type _ListOfEntityObjects {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [EntityObject]
}

type _ListOfFaceDetectionRegions {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [FaceDetectionRegion]
}

type _ListOfFaceDetectionResults {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [FaceDetectionResult]
}

type _ListOfImages {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [Image]
}

type _ListOfInvestigations {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [Investigation]
}

type _ListOfJobTimings {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [JobTiming]
}

type _ListOfJobs {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [Job]
}

type _ListOfL1Results {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [L1Result]
}

type _ListOfL2Results {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [L2Result]
}

type _ListOfNormalizedCoordinatess {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [NormalizedCoordinates]
}

type _ListOfRefinedSearchs {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [RefinedSearch]
}

type _ListOfResultItems {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [ResultItem]
}

type _ListOfResultPages {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [ResultPage]
}

type _ListOfSites {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [Site]
}

type _ListOfTexts {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [Text]
}

type _ListOfThirdPartySearchJobs {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [ThirdPartySearchJob]
}

type _ListOfThirdPartySearchRules {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [ThirdPartySearchRule]
}

type _ListOfVideos {
  totalCount: Int
  isEndOfWholeList: Boolean
  content: [Video]
}

input _NecessityFilter {
  _eq: Necessity
  _neq: Necessity
  _in: [Necessity]
  _nin: [Necessity]
}

input _ProportionalityFilter {
  _eq: Proportionality
  _neq: Proportionality
  _in: [Proportionality]
  _nin: [Proportionality]
}

input _RefinedSearchTypeFilter {
  _eq: RefinedSearchType
  _neq: RefinedSearchType
  _in: [RefinedSearchType]
  _nin: [RefinedSearchType]
}

input _SearchSiteFilter {
  _eq: SearchSite
  _neq: SearchSite
  _in: [SearchSite]
  _nin: [SearchSite]
}

input _SearchStatusFilter {
  _eq: SearchStatus
  _neq: SearchStatus
  _in: [SearchStatus]
  _nin: [SearchStatus]
}

input _SiteTypeFilter {
  _eq: SiteType
  _neq: SiteType
  _in: [SiteType]
  _nin: [SiteType]
}

input _SocialMediaFilter {
  _eq: SocialMedia
  _neq: SocialMedia
  _in: [SocialMedia]
  _nin: [SocialMedia]
}

input _StringFilter {
  _eq: String
  _neq: String
  _gt: String
  _egt: String
  _lt: String
  _elt: String
  _in: [String]
  _nin: [String]
  _like: String
  _ilike: String
  _nlike: String
  _nilike: String
}

input _SurfaceWebFilter {
  _eq: SurfaceWeb
  _neq: SurfaceWeb
  _in: [SurfaceWeb]
  _nin: [SurfaceWeb]
}
