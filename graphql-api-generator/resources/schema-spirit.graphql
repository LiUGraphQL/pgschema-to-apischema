
interface Content{
    source: [ResultPage!]!
    path : String!
    Job: Job!
}

type Image implements Content{
    source: [ResultPage!]!
    url: String!
    path : String!
    Job: Job!
}

type Audio implements Content{
    source: [ResultPage!]!
    url: String!
    path : String!
    Job: Job!
}

type Text implements Content{
    source: [ResultPage!]!
    path : String!
    Job: Job!
}

type Video implements Content{
    source: [ResultPage!]!
    url: String!
    path : String!
    Job: Job!
}

directive @distinct on FIELD_DEFINITION
directive @noloops on FIELD_DEFINITION

type Entity_object{
    value : Entity_Value!
    type : String!
    note: String
    reasonForAddition: String
    source : [Content!] @distinct
    cooccurs : [Entity_object] @distinct @noloops
    inference (reason:String) : [Entity_object] @distinct @noloops
}

enum Entity_Value {
    PERSON
    NORP
    FAC
    ORG
    GPE
    LOC
    PRODUCT
    EVENT
    WORK_OF_ART
    LAW
    LANGUAGE
    DATE
    TIME
    PERCENT
    MONEY
    QUANTITY
    ORDINAL
    CARDINAL
}



"""
General type for any kind of detection or classification result.
Basically links to the source content.
"""
interface DetectionResult {
    source: Content!
    region: DetectionRegion
    algorithm: String!
}

"""
General type for any kind of region identified in a content source
and reported within a DetectionResult
"""
interface DetectionRegion {
    test: Int
}

"""
Type for spatial regions in images with detected faces
"""
type FaceDetectionRegion implements DetectionRegion{
    boundingBox : [NormalizedCoordinates!]!
}

type NormalizedCoordinates {
    x: Float!
    y: Float!
}


enum DetectedGender {
    MALE
    FEMALE
}

type DetectedAge {
    min: Float!
    max: Float!
}

"""
Detection result for faces in images
"""
type FaceDetectionResult  implements DetectionResult {
    source: Image!

    algorithm: String!

    embeddingAlgorithm: String!

    region: FaceDetectionRegion!

    gender: DetectedGender

    age: DetectedAge

    embedding: String!
    similarity(distance:Float!): [FaceDetectionResult!]
}

interface Job {
    JobTiming: JobTiming!
    Investigation: Investigation!
}

type CrawlingJob implements Job {
    JobTiming: JobTiming!
    ContentIntakeRules: [CrawlingRule!]!
    Investigation: Investigation!
}

type ThirdPartySearchJob implements Job{
    JobTiming: JobTiming!
    ContentIntakeRules: [ThirdPartySearchRule!]!
    Investigation: Investigation!
}

type JobTiming{
    Date: Date
    RepeatEach: Int
    Until: Date
    RunNow: Boolean!
    Active: Boolean!
}

type CrawlingRule{
    seed_url: String!
    depth: Int
}

type ThirdPartySearchRule{
    Keywords: [String!]!
    Service: SocialMedia!
}

scalar Date

type Investigation {
    UserID: ID!
    Title: String!
    Description: String!
    CaseNumber: String!
    Authorization: Authorization
    Searches: [Search]
    Created: Date!
    Hide: Boolean!
}

type Authorization {
    SearchPurpose: String!
    Necessity: [Necessity]
    Proportionality: [Proportionality]
    TrainedAndAuthorized: Boolean
    DarkWeb: Boolean!
    AuthBy: Authority!
    Created: Date!
}

enum Necessity { TEST }

enum Proportionality { TEST }


type Authority {
    Name: String!
    Position: String!
}


type Search {
    UserID: ID!
    Keyword: String
    Reason: String!
    Type: RefinedSearchType
    Level: Int
    SurfaceWebs: [SurfaceWeb]
    SocialMedias: [SocialMedia]
    SearchStatus: SearchStatus!
    Result: [ResultPage]
    Url: String
    SearchType: SearchType!
    Created: Date!
    Hide: Boolean!
}

enum SearchType {
    Automatic
    Refined
}

enum RefinedSearchType {
    Fuzzy
    Exact
}

enum SurfaceWeb {
    Google
    Yahoo
}

enum SocialMedia {
    Facebook
    Twitter
}

enum SearchStatus {
    L1Requested
    L1Notified
    L1Returned
    L2Requested
    L2Notified
    L2Returned
    AnalysisRequested
    AnalysisCompleted
}

type Site {
    SiteType: SiteType!
    SiteName: SearchSite!
}

enum SiteType {
    SurfaceWeb
    SocialMedia
    DarkWeb
    DeepWeb
}

enum SearchSite {
    Google
    Yahoo
    Facebook
    Twitter
}

"""Results Section:
From the perspective of AES, Level1 results are the results returned for a Surface Web search split
into pages with a maximum of 10 pages per search and results, usually 10 per page."""

type ResultPage {
    Site: Site!
    SearchLevel: Int!
    Url: String!
    Html: String!
    Status: String!
    L1Results: [L1Result]
    L2Results: [L2Result]
}

interface ResultItem {
    Node: String!
    Url: String!
    Include: Boolean!
    ExcludeReason: String!
    Hide: Boolean!
    Use: Boolean!
}

type L1Result implements ResultItem {
    Page: ResultPage!
    Node: String!
    Href: String!
    Url: String!
    Title: String!
    Citation: String!
    Summary: String!
    Include: Boolean!
    ExcludeReason: String!
    Hide: Boolean!
    Use: Boolean!
}

type L2Result implements ResultItem {
    Page: ResultPage!
    Node: String!
    Url: String!
    UrlText: String!
    Description: String!
    Include: Boolean!
    ExcludeReason: String!
    Hide: Boolean!
    Use: Boolean!
}
