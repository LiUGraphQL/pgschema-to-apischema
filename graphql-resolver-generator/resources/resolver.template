let driver;

module.exports = {
  get: function(options) {
    driver = options.driver;
    return resolvers;
  }
};

const resolvers = {
    Query: {
    % for type in data['types']:
        ${type['name']}: async (parent, args, context, info) =>
            await driver.get(args.id, info.returnType, info.schema),
    % endfor
    % for type in data['types']:
        % if type['hasKeyDirective']:
        ${type['name']}ByKey: async (parent, args, context, info) =>
            await driver.getByKey(args.key, info.returnType),
        % endif
    % endfor

    % for type in data['types']:
        % if type['Name'][0] != '_':
        listOf${type['Name']}s: async (parent, args, context, info) =>
            await driver.getList(args, info),
        % endif
    % endfor

    % for interface_name in data['interfaces']:
        % if interface_name[0] != '_':
        listOf${interface_name}s: async (parent, args, context, info) => await driver.getList(args, info),
        % endif
    % endfor
    },

    Mutation: {
    % for type in data['types']:
        % if type['Name'][0] != '_':
        create${type['Name']}: (parent, args, context, info) =>
            driver.create(true, context, args.data, info.schema.getType('${type['Name']}'), info),
        % endif
    % endfor

    % for type in data['types']:
        % for field, field_type in type['edgeFieldEndpoints']:
        create${field}EdgeFrom${type['Name']}: async (parent, args, context, info) =>
            await driver.createEdge(
                true,
                context,
                args.data.sourceID,
                info.schema.getType('${type['Name']}'),
                '${field[0].lower() + field[1:]}',
                args.data.targetID,
                info.schema.getType('${field_type.name}'),
                args.data.annotations,
                info),
        % endfor
    % endfor

    % for type in data['types']:
        % if type['Name'][0] != '_':
        update${type['Name']}: async (parent, args, context, info) =>
            driver.update(
                true,
                context,
                args.id,
                args.data,
                info.schema.getType('${type['Name']}'),
                info),
        % endif
    % endfor

    % for type_name in data['typeDelete']:
        delete${type_name}: (parent, args, context, info) =>
            driver.deleteObject(true, context, args.id, info.schema.getType('${type_name}'), info),
    % endfor

    % for edgeName, sourceType in data['edge_types_to_delete']:
        delete${edgeName}: async (parent, args, context, info) =>
            await driver.deleteEdge(
                true,
                context,
                args.id,
                '${edgeName}',
                info.schema.getType('${sourceType}'),
                info),
    % endfor
    },

% for type in data['types']:
    ${type['Name']}: {
        id: (parent, args, context, info) => parent._id,
        % for field in type['fields']:
        ${field}: async (parent, args, context, info) =>
            await driver.getEdgeEndpoint(parent, args, info),
        % endfor
        % for field in type['DateTime']:
        ${field}: async (parent, args, context, info) => new Date(parent.${field}),
        % endfor
        % for field in type['edgeFields']:
        ${field}: async (parent, args, context, info) =>
            await driver.getEdge(parent, args, info),
        % endfor
    },
% endfor

% for type in data['types']:
    % if type['Name'][0] != '_':
    _ListOf${type['Name']}s: {
        totalCount: async (parent, args, context, info) =>
            await driver.getTotalCount(parent, args, info),
        isEndOfWholeList: async (parent, args, context, info) =>
            await driver.isEndOfList(parent, args, info),
    },
    % endif
% endfor

% for type in data['types']:
    % for field, field_type in type['edgeFieldEndpoints']:
    _${field}EdgeFrom${type['Name']}: {
        id: (parent, args, context, info) => parent._id,
        source: async (parent, args, context, info) =>
            await driver.get(parent._from, info.schema.getType('${type['Name']}'), info.schema),
        target: async (parent, args, context, info) =>
            await driver.get(parent._to, info.schema.getType('${field_type.name}'), info.schema),
    },
    % endfor
% endfor

% for interface_name in data['interfaces']:
    % if interface_name.startswith('_'):
    ${interface_name}: {
        __resolveType: (parent, args, context, info) =>
            '_' + parent._id.split('/')[0]
    },
    % else:
    ${interface_name}: {
        __resolveType: (parent, args, context, info) =>
            parent._id.split('/')[0]
    },
    % endif
% endfor
}